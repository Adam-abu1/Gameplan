// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, Composable, TDataShape, Client } from '@hey-api/client-nuxt';
import type { CreatorRolesListData, CreatorRolesListResponse, CreatorsListData, CreatorsListResponse, CreatorsReadData, CreatorsReadResponse, DevelopersListData, DevelopersListResponse, DevelopersReadData, DevelopersReadResponse, GamesListData, GamesListResponse, GamesAdditionsListData, GamesAdditionsListResponse, GamesDevelopmentTeamListData, GamesDevelopmentTeamListResponse, GamesGameSeriesListData, GamesGameSeriesListResponse, GamesParentGamesListData, GamesParentGamesListResponse, GamesScreenshotsListData, GamesScreenshotsListResponse, GamesStoresListData, GamesStoresListResponse, GamesReadData, GamesReadResponse, GamesAchievementsReadData, GamesAchievementsReadResponse, GamesMoviesReadData, GamesMoviesReadResponse, GamesRedditReadData, GamesRedditReadResponse, GamesSuggestedReadData, GamesSuggestedReadResponse, GamesTwitchReadData, GamesTwitchReadResponse, GamesYoutubeReadData, GamesYoutubeReadResponse, GenresListData, GenresListResponse, GenresReadData, GenresReadResponse, PlatformsListData, PlatformsListResponse, PlatformsListsParentsListData, PlatformsListsParentsListResponse, PlatformsReadData, PlatformsReadResponse, PublishersListData, PublishersListResponse, PublishersReadData, PublishersReadResponse, StoresListData, StoresListResponse, StoresReadData, StoresReadResponse, TagsListData, TagsListResponse, TagsReadData, TagsReadResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TComposable extends Composable, TData extends TDataShape = TDataShape, ResT = unknown, DefaultT = undefined> = ClientOptions<TComposable, TData, ResT, DefaultT> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get a list of creator positions (jobs).
 */
export const creatorRolesList = <TComposable extends Composable, DefaultT extends CreatorRolesListResponse = CreatorRolesListResponse>(options: Options<TComposable, CreatorRolesListData, CreatorRolesListResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, CreatorRolesListResponse | DefaultT, unknown, DefaultT>({
        url: '/creator-roles',
        ...options
    });
};

/**
 * Get a list of game creators.
 */
export const creatorsList = <TComposable extends Composable, DefaultT extends CreatorsListResponse = CreatorsListResponse>(options: Options<TComposable, CreatorsListData, CreatorsListResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, CreatorsListResponse | DefaultT, unknown, DefaultT>({
        url: '/creators',
        ...options
    });
};

/**
 * Get details of the creator.
 */
export const creatorsRead = <TComposable extends Composable, DefaultT extends CreatorsReadResponse = CreatorsReadResponse>(options: Options<TComposable, CreatorsReadData, CreatorsReadResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, CreatorsReadResponse | DefaultT, unknown, DefaultT>({
        url: '/creators/{id}',
        ...options
    });
};

/**
 * Get a list of game developers.
 */
export const developersList = <TComposable extends Composable, DefaultT extends DevelopersListResponse = DevelopersListResponse>(options: Options<TComposable, DevelopersListData, DevelopersListResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, DevelopersListResponse | DefaultT, unknown, DefaultT>({
        url: '/developers',
        ...options
    });
};

/**
 * Get details of the developer.
 */
export const developersRead = <TComposable extends Composable, DefaultT extends DevelopersReadResponse = DevelopersReadResponse>(options: Options<TComposable, DevelopersReadData, DevelopersReadResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, DevelopersReadResponse | DefaultT, unknown, DefaultT>({
        url: '/developers/{id}',
        ...options
    });
};

/**
 * Get a list of games.
 */
export const gamesList = <TComposable extends Composable, DefaultT extends GamesListResponse = GamesListResponse>(options: Options<TComposable, GamesListData, GamesListResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GamesListResponse | DefaultT, unknown, DefaultT>({
        url: '/games',
        ...options
    });
};

/**
 * Get a list of DLC's for the game, GOTY and other editions, companion apps, etc.
 */
export const gamesAdditionsList = <TComposable extends Composable, DefaultT extends GamesAdditionsListResponse = GamesAdditionsListResponse>(options: Options<TComposable, GamesAdditionsListData, GamesAdditionsListResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GamesAdditionsListResponse | DefaultT, unknown, DefaultT>({
        url: '/games/{game_pk}/additions',
        ...options
    });
};

/**
 * Get a list of individual creators that were part of the development team.
 */
export const gamesDevelopmentTeamList = <TComposable extends Composable, DefaultT extends GamesDevelopmentTeamListResponse = GamesDevelopmentTeamListResponse>(options: Options<TComposable, GamesDevelopmentTeamListData, GamesDevelopmentTeamListResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GamesDevelopmentTeamListResponse | DefaultT, unknown, DefaultT>({
        url: '/games/{game_pk}/development-team',
        ...options
    });
};

/**
 * Get a list of games that are part of the same series.
 */
export const gamesGameSeriesList = <TComposable extends Composable, DefaultT extends GamesGameSeriesListResponse = GamesGameSeriesListResponse>(options: Options<TComposable, GamesGameSeriesListData, GamesGameSeriesListResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GamesGameSeriesListResponse | DefaultT, unknown, DefaultT>({
        url: '/games/{game_pk}/game-series',
        ...options
    });
};

/**
 * Get a list of parent games for DLC's and editions.
 */
export const gamesParentGamesList = <TComposable extends Composable, DefaultT extends GamesParentGamesListResponse = GamesParentGamesListResponse>(options: Options<TComposable, GamesParentGamesListData, GamesParentGamesListResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GamesParentGamesListResponse | DefaultT, unknown, DefaultT>({
        url: '/games/{game_pk}/parent-games',
        ...options
    });
};

/**
 * Get screenshots for the game.
 */
export const gamesScreenshotsList = <TComposable extends Composable, DefaultT extends GamesScreenshotsListResponse = GamesScreenshotsListResponse>(options: Options<TComposable, GamesScreenshotsListData, GamesScreenshotsListResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GamesScreenshotsListResponse | DefaultT, unknown, DefaultT>({
        url: '/games/{game_pk}/screenshots',
        ...options
    });
};

/**
 * Get links to the stores that sell the game.
 */
export const gamesStoresList = <TComposable extends Composable, DefaultT extends GamesStoresListResponse = GamesStoresListResponse>(options: Options<TComposable, GamesStoresListData, GamesStoresListResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GamesStoresListResponse | DefaultT, unknown, DefaultT>({
        url: '/games/{game_pk}/stores',
        ...options
    });
};

/**
 * Get details of the game.
 */
export const gamesRead = <TComposable extends Composable, DefaultT extends GamesReadResponse = GamesReadResponse>(options: Options<TComposable, GamesReadData, GamesReadResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GamesReadResponse | DefaultT, unknown, DefaultT>({
        url: '/games/{id}',
        ...options
    });
};

/**
 * Get a list of game achievements.
 */
export const gamesAchievementsRead = <TComposable extends Composable, DefaultT extends GamesAchievementsReadResponse = GamesAchievementsReadResponse>(options: Options<TComposable, GamesAchievementsReadData, GamesAchievementsReadResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GamesAchievementsReadResponse | DefaultT, unknown, DefaultT>({
        url: '/games/{id}/achievements',
        ...options
    });
};

/**
 * Get a list of game trailers.
 */
export const gamesMoviesRead = <TComposable extends Composable, DefaultT extends GamesMoviesReadResponse = GamesMoviesReadResponse>(options: Options<TComposable, GamesMoviesReadData, GamesMoviesReadResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GamesMoviesReadResponse | DefaultT, unknown, DefaultT>({
        url: '/games/{id}/movies',
        ...options
    });
};

/**
 * Get a list of most recent posts from the game's subreddit.
 */
export const gamesRedditRead = <TComposable extends Composable, DefaultT extends GamesRedditReadResponse = GamesRedditReadResponse>(options: Options<TComposable, GamesRedditReadData, GamesRedditReadResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GamesRedditReadResponse | DefaultT, unknown, DefaultT>({
        url: '/games/{id}/reddit',
        ...options
    });
};

/**
 * Get a list of visually similar games, available only for business and enterprise API users.
 */
export const gamesSuggestedRead = <TComposable extends Composable, DefaultT extends GamesSuggestedReadResponse = GamesSuggestedReadResponse>(options: Options<TComposable, GamesSuggestedReadData, GamesSuggestedReadResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GamesSuggestedReadResponse | DefaultT, unknown, DefaultT>({
        url: '/games/{id}/suggested',
        ...options
    });
};

/**
 * Get streams on Twitch associated with the game, available only for business and enterprise API users.
 */
export const gamesTwitchRead = <TComposable extends Composable, DefaultT extends GamesTwitchReadResponse = GamesTwitchReadResponse>(options: Options<TComposable, GamesTwitchReadData, GamesTwitchReadResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GamesTwitchReadResponse | DefaultT, unknown, DefaultT>({
        url: '/games/{id}/twitch',
        ...options
    });
};

/**
 * Get videos from YouTube associated with the game, available only for business and enterprise API users.
 */
export const gamesYoutubeRead = <TComposable extends Composable, DefaultT extends GamesYoutubeReadResponse = GamesYoutubeReadResponse>(options: Options<TComposable, GamesYoutubeReadData, GamesYoutubeReadResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GamesYoutubeReadResponse | DefaultT, unknown, DefaultT>({
        url: '/games/{id}/youtube',
        ...options
    });
};

/**
 * Get a list of video game genres.
 */
export const genresList = <TComposable extends Composable, DefaultT extends GenresListResponse = GenresListResponse>(options: Options<TComposable, GenresListData, GenresListResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GenresListResponse | DefaultT, unknown, DefaultT>({
        url: '/genres',
        ...options
    });
};

/**
 * Get details of the genre.
 */
export const genresRead = <TComposable extends Composable, DefaultT extends GenresReadResponse = GenresReadResponse>(options: Options<TComposable, GenresReadData, GenresReadResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GenresReadResponse | DefaultT, unknown, DefaultT>({
        url: '/genres/{id}',
        ...options
    });
};

/**
 * Get a list of video game platforms.
 */
export const platformsList = <TComposable extends Composable, DefaultT extends PlatformsListResponse = PlatformsListResponse>(options: Options<TComposable, PlatformsListData, PlatformsListResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, PlatformsListResponse | DefaultT, unknown, DefaultT>({
        url: '/platforms',
        ...options
    });
};

/**
 * Get a list of parent platforms.
 * For instance, for PS2 and PS4 the “parent platform” is PlayStation.
 */
export const platformsListsParentsList = <TComposable extends Composable, DefaultT extends PlatformsListsParentsListResponse = PlatformsListsParentsListResponse>(options: Options<TComposable, PlatformsListsParentsListData, PlatformsListsParentsListResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, PlatformsListsParentsListResponse | DefaultT, unknown, DefaultT>({
        url: '/platforms/lists/parents',
        ...options
    });
};

/**
 * Get details of the platform.
 */
export const platformsRead = <TComposable extends Composable, DefaultT extends PlatformsReadResponse = PlatformsReadResponse>(options: Options<TComposable, PlatformsReadData, PlatformsReadResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, PlatformsReadResponse | DefaultT, unknown, DefaultT>({
        url: '/platforms/{id}',
        ...options
    });
};

/**
 * Get a list of video game publishers.
 */
export const publishersList = <TComposable extends Composable, DefaultT extends PublishersListResponse = PublishersListResponse>(options: Options<TComposable, PublishersListData, PublishersListResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, PublishersListResponse | DefaultT, unknown, DefaultT>({
        url: '/publishers',
        ...options
    });
};

/**
 * Get details of the publisher.
 */
export const publishersRead = <TComposable extends Composable, DefaultT extends PublishersReadResponse = PublishersReadResponse>(options: Options<TComposable, PublishersReadData, PublishersReadResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, PublishersReadResponse | DefaultT, unknown, DefaultT>({
        url: '/publishers/{id}',
        ...options
    });
};

/**
 * Get a list of video game storefronts.
 */
export const storesList = <TComposable extends Composable, DefaultT extends StoresListResponse = StoresListResponse>(options: Options<TComposable, StoresListData, StoresListResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, StoresListResponse | DefaultT, unknown, DefaultT>({
        url: '/stores',
        ...options
    });
};

/**
 * Get details of the store.
 */
export const storesRead = <TComposable extends Composable, DefaultT extends StoresReadResponse = StoresReadResponse>(options: Options<TComposable, StoresReadData, StoresReadResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, StoresReadResponse | DefaultT, unknown, DefaultT>({
        url: '/stores/{id}',
        ...options
    });
};

/**
 * Get a list of tags.
 */
export const tagsList = <TComposable extends Composable, DefaultT extends TagsListResponse = TagsListResponse>(options: Options<TComposable, TagsListData, TagsListResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, TagsListResponse | DefaultT, unknown, DefaultT>({
        url: '/tags',
        ...options
    });
};

/**
 * Get details of the tag.
 */
export const tagsRead = <TComposable extends Composable, DefaultT extends TagsReadResponse = TagsReadResponse>(options: Options<TComposable, TagsReadData, TagsReadResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, TagsReadResponse | DefaultT, unknown, DefaultT>({
        url: '/tags/{id}',
        ...options
    });
};